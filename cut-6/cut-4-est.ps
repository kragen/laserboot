%!PS-Adobe-2.0
%%BoundingBox: 0 0 2297 1276
%%Pages: 1
%%BeginProlog
% Trying to do some really simple parametric design in PostScript.
% This file is a construction set I designed based on some work by
% Matt Heck.  I call it Heckballs.
/inch 72 def
/mm_size inch 25.4 div def
/bdef { bind def } bind def
/inches { inch mul } bdef
/mm { mm_size mul } bdef
% These colors come from the Max58 service bureau.
/cutting { 1 0 0 setrgbcolor } bdef
/marking { 0 0 1 setrgbcolor } bdef
/engraving { 0 0 0 setrgbcolor } bdef

/max58-dimensions { 810 mm 450 mm } bdef

/thickness 3 mm def
% Allow this much clearance to allow tabs to pass through slots
% without colliding.  At exactly 3.0 mm, the slots grip tightly (at
% least during a previous test), while at 3.15 mm, there is
% significant slack in the joints, and assemblies sometimes fall apart
% under their own weight.  So I'm trying 3.03 mm.
/slop 0.03 mm def

% Measurement by redefining the path-construction operators (the ones
% I'm using, anyway.)

/orig-rlineto /rlineto load def
/orig-rmoveto /rmoveto load def
/orig-lineto /lineto load def
/orig-moveto /moveto load def
% Calculate distance from x1 y1 to x2 y2
/dist { 3 2 roll sub  3 1 roll sub  dup mul exch  dup mul add  sqrt } bdef
/total-points 0 def             % Total number of points drawn
/total-distance 0 def           % Total distance drawn
/increment-points { /total-points total-points 1 add def } bdef
/mark-point { currentpoint /lasty exch def /lastx exch def } bdef
/measure {
    /total-distance  lastx lasty currentpoint dist  total-distance add  def
} bdef
/moveto { orig-moveto increment-points } bdef
/rmoveto { orig-rmoveto increment-points } bdef
/lineto { mark-point  orig-lineto  measure increment-points } bdef
/rlineto { mark-point orig-rlineto measure increment-points } bdef
/measurement-report {
    (Totals: ) print
    total-points (      ) cvs print
    ( vertices; ) print
    total-distance 1 mm div (       ) cvs print
    ( mm drawn.\nEstimated cutting time ) print
    total-points .4 mul total-distance 22 mm div add dup
    (       ) cvs print
    ( seconds, estimated Max58 cost AR$) print
    0.42 mul (       ) cvs print
    (.\n) print
} bdef

% Turtle graphics.

/seth { /theta exch def } def
/rt { theta add seth } def
/lt { neg rt } def
/pd { /turtle-pen {rlineto} def } def
/pu { /turtle-pen {rmoveto} def } def
/here { [ /turtle-pen load  theta  currentpoint ] } def
/return { aload pop  moveto  seth  /turtle-pen exch def } def
/fd { dup  theta sin mul  exch theta cos mul  turtle-pen } def
pd  0 seth

%%EndProlog
%%Page: 1 1
save

.001 setlinewidth

cutting

0 0 moveto
max58-dimensions  exch 0 lineto
0 0 moveto 0 lineto
stroke

% This version doesn't yet have:
% - beams
% - clips
% - labels
% - design rule checks
% But it's what I've been able to manage so far.
/sq2 2 sqrt def  /isq2 1 sq2 div def
/octsize 50 mm def
/octcenter octsize 2 div def
% The bounding square of the octagon is
% 1/sqrt(2) sidelength + sidelength + 1/sqrt(2) sidelength.
% This means that sidelength is octsize / (1 + sqrt(2)).
/octratio 1 sq2 add def
/sidelength octsize octratio div def
/cornerpos isq2 sidelength mul def
/slitwidth thickness slop add def
/freesidelength sidelength slitwidth sub 2 div def
/halfslit slitwidth 2 div def
/depth octcenter 2 div thickness 2 div sub def

% Tabs to keep the octagons from separating.
/tabsize 1 mm def
/divotwidth thickness 2 mul def
/divotside { 
    here
    45 rt
    divotwidth octratio div
        dup fd 45 lt
        dup fd 45 lt
        fd
    return
} bdef

/nslit {
    /slitdepth exch def
    90 rt
    slitdepth divotwidth sub fd
    divotside
    pu
    divotwidth fd
    pd
    90 lt slitwidth fd  90 lt
    divotside
    pu
    divotwidth fd
    pd
    slitdepth divotwidth sub fd
    90 rt
} bdef
/slit { depth nslit } bdef
/freeside { freesidelength fd } bdef
/tabside { pu tabsize fd pd freesidelength tabsize sub fd } bdef
/oct {
    % Start with the turtle in the lower left corner, pointing up.
    here
        90 rt  pu  cornerpos fd  135 lt
        pd freeside slit freeside
        45 rt  pu freeside pd  slit  pu freeside
        45 rt  pd tabside slit freeside
        45 rt  pd tabside slit freeside %top
        45 rt  pd freeside slit freeside
        45 rt  pd freeside slit tabside %right
        45 rt  pd tabside slit freeside
        45 rt  pu freeside  pd octcenter nslit
    return
} bdef

/row { 
    oct
    3 { octsize 0 rmoveto oct } repeat
} bdef

0 0 moveto
currentpoint row moveto
8 { 0 octsize rmoveto  currentpoint  row  moveto } repeat
stroke

measurement-report

restore
showpage
%%EOF
