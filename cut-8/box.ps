%!PS-Adobe-2.0
%%BoundingBox: 0 0 2297 1276
%%Pages: 1
%%BeginProlog
% Trying to do some really simple parametric design in PostScript.
/inch 72 def
/mm_size inch 25.4 div def
/bdef { bind def } bind def
/inches { inch mul } bdef
/mm { mm_size mul } bdef
% These colors come from the Max58 service bureau.
/cutting { 1 0 0 setrgbcolor } bdef
/marking { 0 0 1 setrgbcolor } bdef
/engraving { 0 0 0 setrgbcolor } bdef

% Debugger:
/dump { dup load exch (                        ) cvs print ( = ) print === } bdef
/dumpmm {
    dup load exch (                         ) cvs print
    ( = ) print
    1 mm div (       ) cvs print
    ( mm\n) print
} bdef

/max58-dimensions { 810 mm 450 mm } bdef

/thickness 1.5 mm def

% Measurement by redefining the path-construction operators (the ones
% I'm using, anyway.)

/orig-rlineto /rlineto load def
/orig-rmoveto /rmoveto load def
/orig-lineto /lineto load def
/orig-moveto /moveto load def
% Calculate distance from x1 y1 to x2 y2
/dist { 3 2 roll sub  3 1 roll sub  dup mul exch  dup mul add  sqrt } bdef
/total-points 0 def             % Total number of points drawn
/total-distance 0 def           % Total distance drawn
/increment-points { /total-points total-points 1 add def } bdef
/mark-point { currentpoint /lasty exch def /lastx exch def } bdef
/measure {
    /total-distance  lastx lasty currentpoint dist  total-distance add  def
} bdef
/moveto { orig-moveto increment-points } bdef
/rmoveto { orig-rmoveto increment-points } bdef
/lineto { mark-point  orig-lineto  measure increment-points } bdef
/rlineto { mark-point orig-rlineto measure increment-points } bdef
/measurement-report {
    (Totals: ) print
    total-points (      ) cvs print
    ( vertices; ) print
    total-distance 1 mm div (       ) cvs print
    ( mm drawn.\nEstimated cutting time ) print
    total-points .06 mul total-distance 24 mm div add 5 add dup
    (       ) cvs print
    ( seconds, estimated Max58 cost AR$) print
    0.40 mul (       ) cvs print
    (.\n) print
} bdef

% Turtle graphics.

/seth { /theta exch def } def
/rt { theta add seth } def
/lt { neg rt } def
/pd { /turtle-pen {rlineto} def } def
/pu { /turtle-pen {rmoveto} def } def
/here { [ /turtle-pen load  theta  currentpoint ] } def
/return { aload pop  moveto  seth  /turtle-pen exch def } def
/fd { dup  theta sin mul  exch theta cos mul  turtle-pen } def
pd  0 seth

%%EndProlog
%%Page: 1 1
save

.001 setlinewidth

cutting

0 0 moveto
max58-dimensions  exch 0 lineto
0 0 moveto 0 lineto
stroke

/slitwidth thickness def
/tabsize 0.8 mm def
/tan { dup cos exch sin div } bdef
/compartment-width 32 mm def
/nx 8 def                       % number of compartments in x
/ny 8 def                       % number of compartments in y
/n-x-strips nx 1 add def
/n-y-strips ny 1 add def
/compartment-depth 32 mm def
/x-strip-length compartment-width ny mul thickness n-y-strips mul add def
/y-strip-length compartment-width nx mul thickness n-x-strips mul add def
/x-strip {
    thickness fd
    pu
    x-strip-length thickness 2 mul sub fd
    pd thickness fd
    90 rt
    pu tabsize fd pd
    compartment-depth 2 div tabsize sub fd
    90 rt
    thickness fd
    90 lt
    compartment-depth 2 div fd
    90 rt
    ny 1 sub {
        compartment-width fd
        90 rt
        compartment-depth 2 div dup fd
        90 lt
        thickness fd
        90 lt
        fd
        90 rt
    } repeat
    compartment-width fd
    90 rt
    compartment-depth 2 div dup fd
    90 lt
    thickness fd
    90 rt
    tabsize sub fd
    pu tabsize fd pd
    90 rt
} def

3 mm 3 mm moveto
n-x-strips { x-strip compartment-depth 0 rmoveto } repeat

stroke

engraving
stroke

(Including engraving, assuming engraving costs the same as cutting:\n) print
measurement-report

restore
showpage
%%EOF
